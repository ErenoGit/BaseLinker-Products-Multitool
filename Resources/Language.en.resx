<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedProductsInfo" xml:space="preserve">
    <value>Successful added {a} out of {b} products!</value>
  </data>
  <data name="CheckDuplicatesEndInfo" xml:space="preserve">
    <value>Out of {a} products, a total of {b} {c} were found, of which there is more than one!</value>
  </data>
  <data name="DeletedProductsInfo" xml:space="preserve">
    <value>Successful deleted {a} out of {b} products!</value>
  </data>
  <data name="DownloadedInfoAboutXProducts" xml:space="preserve">
    <value>Downloaded products details from {a} products...</value>
  </data>
  <data name="DownloadedXCategories" xml:space="preserve">
    <value>Downloaded {a} categories...</value>
  </data>
  <data name="DownloadedXProducts" xml:space="preserve">
    <value>Downloaded {a} products...</value>
  </data>
  <data name="DoYouUnderstandAndAgree" xml:space="preserve">
    <value>Do you understand the above and do you want to continue copying products?</value>
  </data>
  <data name="EmptyCategoriesList" xml:space="preserve">
    <value>Category list is empty! Only products without category will be copied.</value>
  </data>
  <data name="EmptyListOfCategories" xml:space="preserve">
    <value>Empty categories list!</value>
  </data>
  <data name="EmptyListOfProducts" xml:space="preserve">
    <value>Empty products list!</value>
  </data>
  <data name="EnterAPIToken" xml:space="preserve">
    <value>Enter the BaseLinker account API token (My Account&gt; API&gt; Your API Token) and confirm by pressing ENTER</value>
  </data>
  <data name="EnterCategory" xml:space="preserve">
    <value>Enter the product category ID (BaseLinker Magazine &gt; Categories &gt; [Your category] &gt; [URL address ending]) and confirm by pressing ENTER (products without categories = leave this field blank)</value>
  </data>
  <data name="EnterQuantityOfNewProducts" xml:space="preserve">
    <value>Enter quantity of new products and confirm by pressing ENTER</value>
  </data>
  <data name="EnterSourceBL" xml:space="preserve">
    <value>Enter source BaseLinker account details...</value>
  </data>
  <data name="EnterSourceCategory" xml:space="preserve">
    <value>Enter source product category details...</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error!</value>
  </data>
  <data name="ErrorWhenDownloadCategories" xml:space="preserve">
    <value>There was an error getting the category list!</value>
  </data>
  <data name="ErrorWhenDownloadFullProducts" xml:space="preserve">
    <value>There was an error downloading the products details!</value>
  </data>
  <data name="ErrorWhenDownloadProducts" xml:space="preserve">
    <value>There was an error downloading the product list!</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="FoundDuplicate" xml:space="preserve">
    <value>Duplicated {a} found:</value>
  </data>
  <data name="HowToCheckDuplicates" xml:space="preserve">
    <value>How to check if a product is duplicated?</value>
  </data>
  <data name="HowToCheckDuplicates1" xml:space="preserve">
    <value>Magazine number - SKU</value>
  </data>
  <data name="HowToCheckDuplicates2" xml:space="preserve">
    <value>EAN</value>
  </data>
  <data name="HowToCheckDuplicates3" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="HowToDeleteDuplicates" xml:space="preserve">
    <value>How to delete duplicated products?</value>
  </data>
  <data name="HowToDeleteDuplicates1" xml:space="preserve">
    <value>Out of the duplicated products leave one with the highest ID (the newest one added to the products category)</value>
  </data>
  <data name="HowToDeleteDuplicates2" xml:space="preserve">
    <value>Out of the duplicated products leave one with the lowest ID (the oldest one added to the products category)</value>
  </data>
  <data name="InfoAboutImages" xml:space="preserve">
    <value>ATTENTION! Due to API restrictions, the photos sent will be arranged one after the other! For example, if a product has a main photo, additional photo 7 and additional photo 10, then the copy of this product will have the main photo, additional photo 1 and additional photo 2! If the product has an additional photo 5 and an additional photo 12, the copy of this product will have the main photo and additional photo 1!</value>
  </data>
  <data name="InfoAboutVariantsPrices" xml:space="preserve">
    <value>ATTENTION! If the product have variant without an assigned price, variant in the copied product will have the price 1.00!</value>
  </data>
  <data name="InfoNoDuplicates" xml:space="preserve">
    <value>There are no duplicates!</value>
  </data>
  <data name="IsEverythingCorrect" xml:space="preserve">
    <value>Are all the above settings correct?</value>
  </data>
  <data name="MainMenu" xml:space="preserve">
    <value>MAIN MENU</value>
  </data>
  <data name="Menu1" xml:space="preserve">
    <value>Check for duplicate products in selected product category in BaseLinker (checking only, no delete)</value>
  </data>
  <data name="Menu2" xml:space="preserve">
    <value>Removing duplicates in selected product category in BaseLinker</value>
  </data>
  <data name="Menu3" xml:space="preserve">
    <value>Copying all products from one category to another (transfer between BaseLinker accounts possible)</value>
  </data>
  <data name="Menu4" xml:space="preserve">
    <value>Copy entire product inventory (with categories, products etc.) from one BaseLinker account to another (everything except products without categories, they cannot be added via API)</value>
  </data>
  <data name="Menu5" xml:space="preserve">
    <value>Mass generation of new products in a selected product category in BaseLinker (for tests)</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No. Return to the main menu!</value>
  </data>
  <data name="NowEnterSecondBL" xml:space="preserve">
    <value>Now enter details of the second BaseLinker account...</value>
  </data>
  <data name="NowEnterTargetCategory" xml:space="preserve">
    <value>Now enter details of the target product category...</value>
  </data>
  <data name="NumberOfProductsToDeleteQuestion" xml:space="preserve">
    <value>Number of products to be removed</value>
  </data>
  <data name="PressAnythingToBackToMenu" xml:space="preserve">
    <value>Press any key to return to the main menu...</value>
  </data>
  <data name="QuantityOfNewProducts" xml:space="preserve">
    <value>Quantity of new products to generate</value>
  </data>
  <data name="ResponsibilityInfo" xml:space="preserve">
    <value>I am not responsible for any damage caused to my BaseLinker account due to improper use of the program!</value>
  </data>
  <data name="StartedAddingCategories" xml:space="preserve">
    <value>Category list adding to second BL account started...</value>
  </data>
  <data name="StartedDeleteProduct" xml:space="preserve">
    <value>Started removing duplicated products ...</value>
  </data>
  <data name="StartedGetCategoriesList" xml:space="preserve">
    <value>Category list from first BL account download started.</value>
  </data>
  <data name="StartedGetProductsListFromCategory" xml:space="preserve">
    <value>Started downloading products list from category</value>
  </data>
  <data name="StartedGetProductsListFullFromCategory" xml:space="preserve">
    <value>Started downloading products details from category</value>
  </data>
  <data name="Variant" xml:space="preserve">
    <value>Variant</value>
  </data>
  <data name="WrongMenuInput" xml:space="preserve">
    <value>You entered an incorrect value, select an item from the menu by entering it's number</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes, start!</value>
  </data>
  <data name="YourOptions" xml:space="preserve">
    <value>Your settings</value>
  </data>
  <data name="YourOptionsAPI" xml:space="preserve">
    <value>Token API</value>
  </data>
  <data name="YourOptionsAPISource" xml:space="preserve">
    <value>Source account API token</value>
  </data>
  <data name="YourOptionsAPITarget" xml:space="preserve">
    <value>Target account API token</value>
  </data>
  <data name="YourOptionsCategory" xml:space="preserve">
    <value>Products category</value>
  </data>
  <data name="YourOptionsCategorySource" xml:space="preserve">
    <value>Source products category</value>
  </data>
  <data name="YourOptionsCategoryTarget" xml:space="preserve">
    <value>Target products category</value>
  </data>
  <data name="YourOptionsCheckKey" xml:space="preserve">
    <value>Products validation key</value>
  </data>
</root>